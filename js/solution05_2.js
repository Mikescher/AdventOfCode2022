/* Generated by the Nim Compiler v1.6.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI603980150 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654311485 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI469762141 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI603980256 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI452985127 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
NTI452985127.base = NTI33554439;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
NTI603980256.base = NTI33554439;
NTI469762141.base = NTI33554438;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
var NNI654311485 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI654311485.node = NNI654311485;
NTI603980150.base = NTI33554439;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}
var ConstSet2 = setConstr(13, 10);

function nimMax(a_33556998, b_33556999) {
    var Temporary1;

  var result_33557000 = 0;

  BeforeRet: do {
    if ((b_33556999 <= a_33556998)) {
    Temporary1 = a_33556998;
    }
    else {
    Temporary1 = b_33556999;
    }
    
    result_33557000 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557000;

}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}

function eqStrings(a_33556931, b_33556932) {
        if (a_33556931 == b_33556932) return true;
    if (a_33556931 === null && b_33556932.length == 0) return true;
    if (b_33556932 === null && a_33556931.length == 0) return true;
    if ((!a_33556931) || (!b_33556932)) return false;
    var alen = a_33556931.length;
    if (alen != b_33556932.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556931[i] != b_33556932[i]) return false;
    return true;
  

  
}

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet3 = setConstr([48, 57]);
var ConstSet4 = setConstr([48, 57]);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}


function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_469762540 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762540 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_469762540;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_469762540 = addInt(i_469762540, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function filter_469762059(s_469762061, pred_469762063) {
  var result_469762064 = [];

    result_469762064 = nimCopy(null, newSeq_452985301(0), NTI452985127);
    Label1: do {
      var i_469762075 = 0;
      var colontmp__469762533 = 0;
      colontmp__469762533 = (s_469762061).length;
      var i_469762534 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762534 < colontmp__469762533)) break Label3;
            i_469762075 = i_469762534;
            if (pred_469762063(s_469762061[chckIndx(i_469762075, 0, (s_469762061).length - 1)])) {
            var Temporary4 = nimCopy(null, s_469762061[chckIndx(i_469762075, 0, (s_469762061).length - 1)], NTI33554439);
            result_469762064.push(Temporary4);;
            }
            
            i_469762534 = addInt(i_469762534, 1);
          }
      } while (false);
    } while (false);

  return result_469762064;

}

function substr_33557906(s_33557907, first_33557908, last_33557909) {
  var result_33557910 = [];

    var first_33557911 = nimMax(first_33557908, 0);
    var L_33557912 = nimMax(addInt(subInt(nimMin(last_33557909, (s_33557907).length - 1), first_33557911), 1), 0);
    result_33557910 = nimCopy(null, mnewString(chckRange(L_33557912, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557917 = 0;
      var colontmp__469762553 = 0;
      colontmp__469762553 = subInt(L_33557912, 1);
      var res_469762554 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762554 <= colontmp__469762553)) break Label3;
            i_33557917 = res_469762554;
            result_33557910[chckIndx(i_33557917, 0, (result_33557910).length - 1)] = s_33557907[chckIndx(addInt(i_33557917, first_33557911), 0, (s_33557907).length - 1)];
            res_469762554 = addInt(res_469762554, 1);
          }
      } while (false);
    } while (false);

  return result_33557910;

}

function nsuSplitLines(s_603980402, keepEol_603980403) {
            var Temporary6;

  var result_603980404 = [];

    result_603980404 = nimCopy(null, [], NTI603980256);
    Label1: do {
      var xHEX60gensym76_603980410 = [];
      var first_469762547 = 0;
      var last_469762548 = 0;
      var eolpos_469762549 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_469762548 < (s_603980402).length) && !((ConstSet2[s_603980402[chckIndx(last_469762548, 0, (s_603980402).length - 1)]] != undefined)))) break Label5;
                  last_469762548 = addInt(last_469762548, 1);
                }
            } while (false);
            eolpos_469762549 = last_469762548;
            if ((last_469762548 < (s_603980402).length)) {
            if ((s_603980402[chckIndx(last_469762548, 0, (s_603980402).length - 1)] == 10)) {
            last_469762548 = addInt(last_469762548, 1);
            }
            else {
            if ((s_603980402[chckIndx(last_469762548, 0, (s_603980402).length - 1)] == 13)) {
            last_469762548 = addInt(last_469762548, 1);
            if (((last_469762548 < (s_603980402).length) && (s_603980402[chckIndx(last_469762548, 0, (s_603980402).length - 1)] == 10))) {
            last_469762548 = addInt(last_469762548, 1);
            }
            
            }
            }
            }
            
            if (keepEol_603980403) {
            Temporary6 = subInt(last_469762548, 1);
            }
            else {
            Temporary6 = subInt(eolpos_469762549, 1);
            }
            
            xHEX60gensym76_603980410 = substr_33557906(s_603980402, first_469762547, Temporary6);
            var Temporary7 = nimCopy(null, xHEX60gensym76_603980410, NTI33554439);
            result_603980404.push(Temporary7);;
            if ((eolpos_469762549 == last_469762548)) {
            break Label2;
            }
            
            first_469762547 = last_469762548;
          }
      } while (false);
    } while (false);

  return result_603980404;

}

function newSeq_469762184(len_469762186) {
  var result_469762187 = [];

    result_469762187 = new Array(len_469762186); for (var i = 0 ; i < len_469762186 ; ++i) { result_469762187[i] = 0; }
  return result_469762187;

}

function filter_469762204(s_469762206, pred_469762208) {
  var result_469762209 = [];

    result_469762209 = nimCopy(null, newSeq_469762184(0), NTI469762141);
    Label1: do {
      var i_469762220 = 0;
      var colontmp__469762557 = 0;
      colontmp__469762557 = (s_469762206).length;
      var i_469762558 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762558 < colontmp__469762557)) break Label3;
            i_469762220 = i_469762558;
            if (pred_469762208(s_469762206[chckIndx(i_469762220, 0, (s_469762206).length - 1)])) {
            result_469762209.push(s_469762206[chckIndx(i_469762220, 0, (s_469762206).length - 1)]);;
            }
            
            i_469762558 = addInt(i_469762558, 1);
          }
      } while (false);
    } while (false);

  return result_469762209;

}

function nsuStartsWith(s_603981089, prefix_603981090) {
            var Temporary3;

  var result_603981091 = false;

  BeforeRet: do {
    var prefixLenHEX60gensym141_603981096 = (prefix_603981090).length;
    var sLenHEX60gensym141_603981097 = (s_603981089).length;
    var iHEX60gensym141_603981098 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym141_603981096 <= iHEX60gensym141_603981098)) {
          result_603981091 = true;
          break BeforeRet;
          }
          
            if ((sLenHEX60gensym141_603981097 <= iHEX60gensym141_603981098)) Temporary3 = true; else {              Temporary3 = !((s_603981089[chckIndx(iHEX60gensym141_603981098, 0, (s_603981089).length - 1)] == prefix_603981090[chckIndx(iHEX60gensym141_603981098, 0, (prefix_603981090).length - 1)]));            }          if (Temporary3) {
          result_603981091 = false;
          break BeforeRet;
          }
          
          iHEX60gensym141_603981098 = addInt(iHEX60gensym141_603981098, 1);
        }
    } while (false);
  } while (false);

  return result_603981091;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function newSeq_469762234(len_469762236) {
  var result_469762237 = [];

    result_469762237 = new Array(len_469762236); for (var i = 0 ; i < len_469762236 ; ++i) { result_469762237[i] = []; }
  return result_469762237;

}

function reverse_469762319(a_469762321, first_469762322, last_469762323) {
    var x_469762324 = first_469762322;
    var y_469762325 = last_469762323;
    Label1: do {
        Label2: while (true) {
        if (!(x_469762324 < y_469762325)) break Label2;
          var Temporary3 = a_469762321[chckIndx(x_469762324, 0, (a_469762321).length - 1)]; a_469762321[chckIndx(x_469762324, 0, (a_469762321).length - 1)] = a_469762321[chckIndx(y_469762325, 0, (a_469762321).length - 1)]; a_469762321[chckIndx(y_469762325, 0, (a_469762321).length - 1)] = Temporary3;          y_469762325 = subInt(y_469762325, 1);
          x_469762324 = addInt(x_469762324, 1);
        }
    } while (false);

  
}

function reverse_469762313(a_469762315) {
    reverse_469762319(a_469762315, 0, chckRange(nimMax(0, (a_469762315).length - 1), 0, 2147483647));

  
}

function HEX5BHEX5D_469762350(s_469762354, x_469762355) {
  var result_469762356 = [];

    var a_469762358 = x_469762355.a;
    var L_469762360 = addInt(subInt(x_469762355.b, a_469762358), 1);
    result_469762356 = new Array(chckRange(L_469762360, 0, 2147483647)); for (var i = 0 ; i < chckRange(L_469762360, 0, 2147483647) ; ++i) { result_469762356[i] = []; }    Label1: do {
      var i_469762369 = 0;
      var i_469762563 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762563 < L_469762360)) break Label3;
            i_469762369 = i_469762563;
            result_469762356[chckIndx(i_469762369, 0, (result_469762356).length - 1)] = nimCopy(null, s_469762354[chckIndx(addInt(i_469762369, a_469762358), 0, (s_469762354).length - 1)], NTI33554439);
            i_469762563 = addInt(i_469762563, 1);
          }
      } while (false);
    } while (false);

  return result_469762356;

}

function HEX2EHEX2E_905970515(a_905970518, b_905970519) {
  var result_905970520 = ({a: 0, b: 0});

    result_905970520 = nimCopy(result_905970520, {a: a_905970518, b: b_905970519}, NTI654311485);

  return result_905970520;

}

function substrEq_603980005(s_603980006, pos_603980007, substr_603980008) {
  var result_603980009 = false;

  BeforeRet: do {
    var i_603980010 = 0;
    var length_603980011 = (substr_603980008).length;
    Label1: do {
        Label2: while (true) {
        if (!(((i_603980010 < length_603980011) && (addInt(pos_603980007, i_603980010) < (s_603980006).length)) && (s_603980006[chckIndx(addInt(pos_603980007, i_603980010), 0, (s_603980006).length - 1)] == substr_603980008[chckIndx(i_603980010, 0, (substr_603980008).length - 1)]))) break Label2;
          i_603980010 = addInt(i_603980010, 1);
        }
    } while (false);
    result_603980009 = (i_603980010 == length_603980011);
    break BeforeRet;
  } while (false);

  return result_603980009;

}

function nsuSplitString(s_603980297, sep_603980298, maxsplit_603980299) {
  var result_603980300 = [];

    if (!((0 < (sep_603980298).length))) {
    failedAssertImpl_218103864(makeNimstrLit("strutils.nim(739, 11) `sep.len > 0` "));
    }
    
    result_603980300 = nimCopy(null, [], NTI603980150);
    Label1: do {
      var xHEX60gensym72_603980311 = [];
      var lastHEX60gensym41_469762568 = 0;
      var splitsHEX60gensym41_469762569 = maxsplit_603980299;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym41_469762568 <= (s_603980297).length)) break Label3;
            var firstHEX60gensym41_469762571 = lastHEX60gensym41_469762568;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym41_469762568 < (s_603980297).length) && !(substrEq_603980005(s_603980297, lastHEX60gensym41_469762568, sep_603980298)))) break Label5;
                  lastHEX60gensym41_469762568 = addInt(lastHEX60gensym41_469762568, 1);
                }
            } while (false);
            if ((splitsHEX60gensym41_469762569 == 0)) {
            lastHEX60gensym41_469762568 = (s_603980297).length;
            }
            
            xHEX60gensym72_603980311 = substr_33557906(s_603980297, firstHEX60gensym41_469762571, subInt(lastHEX60gensym41_469762568, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym72_603980311, NTI33554439);
            result_603980300.push(Temporary6);;
            if ((splitsHEX60gensym41_469762569 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym41_469762569 = subInt(splitsHEX60gensym41_469762569, 1);
            lastHEX60gensym41_469762568 = addInt(lastHEX60gensym41_469762568, (sep_603980298).length);
          }
      } while (false);
    } while (false);

  return result_603980300;

}

function integerOutOfRangeError_620757240() {
    raiseException({message: makeNimstrLit("Parsed integer outside of valid range"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function rawParseInt_620757260(s_620757261, b_620757262, b_620757262_Idx, start_620757263) {
      var Temporary1;
          var Temporary4;
      var Temporary7;

  var result_620757264 = 0;

    var sign_620757265 = -1;
    var i_620757266 = start_620757263;
    if ((i_620757266 < (s_620757261).length)) {
    if ((s_620757261[chckIndx(i_620757266, 0, (s_620757261).length - 1)] == 43)) {
    i_620757266 += 1;
    }
    else {
    if ((s_620757261[chckIndx(i_620757266, 0, (s_620757261).length - 1)] == 45)) {
    i_620757266 += 1;
    sign_620757265 = 1;
    }
    }
    }
    
      if (!(i_620757266 < (s_620757261).length)) Temporary1 = false; else {        Temporary1 = (ConstSet3[s_620757261[chckIndx(i_620757266, 0, (s_620757261).length - 1)]] != undefined);      }    if (Temporary1) {
    b_620757262[b_620757262_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_620757266 < (s_620757261).length)) Temporary4 = false; else {            Temporary4 = (ConstSet4[s_620757261[chckIndx(i_620757266, 0, (s_620757261).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_620757289 = (s_620757261[chckIndx(i_620757266, 0, (s_620757261).length - 1)] - 48);
          if ((Math.trunc((-9223372036854775808 + c_620757289) / 10) <= b_620757262[b_620757262_Idx])) {
          b_620757262[b_620757262_Idx] = ((b_620757262[b_620757262_Idx] * 10) - c_620757289);
          }
          else {
          integerOutOfRangeError_620757240();
          }
          
          i_620757266 += 1;
          Label5: do {
              Label6: while (true) {
              if (!((i_620757266 < (s_620757261).length) && (s_620757261[chckIndx(i_620757266, 0, (s_620757261).length - 1)] == 95))) break Label6;
                i_620757266 += 1;
              }
          } while (false);
        }
    } while (false);
      if (!(sign_620757265 == -1)) Temporary7 = false; else {        Temporary7 = (b_620757262[b_620757262_Idx] == -9223372036854775808);      }    if (Temporary7) {
    integerOutOfRangeError_620757240();
    }
    else {
      b_620757262[b_620757262_Idx] = (b_620757262[b_620757262_Idx] * sign_620757265);
      result_620757264 = (i_620757266 - start_620757263);
    }
    
    }
    

  return result_620757264;

}

function npuParseBiggestInt(s_620757307, number_620757308, number_620757308_Idx, start_620757309) {
  var result_620757310 = 0;

    var res_620757311 = [0];
    result_620757310 = rawParseInt_620757260(s_620757307, res_620757311, 0, start_620757309);
    if (!((result_620757310 == 0))) {
    number_620757308[number_620757308_Idx] = res_620757311[0];
    }
    

  return result_620757310;

}

function npuParseInt(s_620757313, number_620757314, number_620757314_Idx, start_620757315) {
      var Temporary1;

  var result_620757316 = 0;

    var res_620757317 = [0];
    result_620757316 = npuParseBiggestInt(s_620757313, res_620757317, 0, start_620757315);
      if ((res_620757317[0] < -2147483648)) Temporary1 = true; else {        Temporary1 = (2147483647 < res_620757317[0]);      }    if (Temporary1) {
    integerOutOfRangeError_620757240();
    }
    
    if (!((result_620757316 == 0))) {
    number_620757314[number_620757314_Idx] = chckRange(res_620757317[0], -2147483648, 2147483647);
    }
    

  return result_620757316;

}

function nsuParseInt(s_603980574) {
      var Temporary1;

  var result_603980575 = [0];

    result_603980575[0] = 0;
    var L_603980576 = npuParseInt(s_603980574, result_603980575, 0, 0);
      if (!((L_603980576 == (s_603980574).length))) Temporary1 = true; else {        Temporary1 = (L_603980576 == 0);      }    if (Temporary1) {
    raiseException({message: (makeNimstrLit("invalid integer: ") || []).concat(s_603980574 || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_603980575[0];

}

function delete_469762388(x_469762390, x_469762390_Idx, i_469762391) {
    x_469762390[x_469762390_Idx].splice(i_469762391, 1);

  
}

function map_469762421(s_469762424, op_469762426) {
  var result_469762427 = [];

    result_469762427 = new Array(chckRange((s_469762424).length, 0, 2147483647)); for (var i = 0 ; i < chckRange((s_469762424).length, 0, 2147483647) ; ++i) { result_469762427[i] = 0; }    Label1: do {
      var i_469762443 = 0;
      var colontmp__469762582 = 0;
      colontmp__469762582 = (s_469762424).length;
      var i_469762583 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762583 < colontmp__469762582)) break Label3;
            i_469762443 = i_469762583;
            result_469762427[chckIndx(i_469762443, 0, (result_469762427).length - 1)] = op_469762426(s_469762424[chckIndx(i_469762443, 0, (s_469762424).length - 1)]);
            i_469762583 = addInt(i_469762583, 1);
          }
      } while (false);
    } while (false);

  return result_469762427;

}

function run05_2_469762052() {
    
function HEX3Aanonymous_469762055(p_469762056) {
      var result_469762057 = false;

        result_469762057 = !(eqStrings(p_469762056, []));

      return result_469762057;

    }
      
function HEX3Aanonymous_469762081(p_469762082) {
        var result_469762083 = false;

          result_469762083 = nsuStartsWith(p_469762082, makeNimstrLit(" 1 "));

        return result_469762083;

      }
      var Temporary2;
    
function HEX3Aanonymous_469762198(p_469762199) {
      var result_469762200 = false;

        result_469762200 = !((p_469762199 == 32));

      return result_469762200;

    }
    
function HEX3Aanonymous_469762414(p_469762415) {
      var result_469762416 = 0;

        result_469762416 = p_469762415[chckIndx(subInt((p_469762415).length, 1), 0, (p_469762415).length - 1)];

      return result_469762416;

    }

  var result_469762053 = [];

  BeforeRet: do {
    var lines_469762080 = filter_469762059(nsuSplitLines(makeNimstrLit("    [H]         [H]         [V]    \x0A    [V]         [V] [J]     [F] [F]\x0A    [S] [L]     [M] [B]     [L] [J]\x0A    [C] [N] [B] [W] [D]     [D] [M]\x0A[G] [L] [M] [S] [S] [C]     [T] [V]\x0A[P] [B] [B] [P] [Q] [S] [L] [H] [B]\x0A[N] [J] [D] [V] [C] [Q] [Q] [M] [P]\x0A[R] [T] [T] [R] [G] [W] [F] [W] [L]\x0A 1   2   3   4   5   6   7   8   9 \x0A\x0Amove 3 from 3 to 7\x0Amove 4 from 1 to 9\x0Amove 5 from 6 to 3\x0Amove 6 from 9 to 8\x0Amove 2 from 9 to 5\x0Amove 4 from 3 to 7\x0Amove 1 from 3 to 6\x0Amove 3 from 5 to 7\x0Amove 1 from 2 to 1\x0Amove 4 from 7 to 8\x0Amove 17 from 8 to 7\x0Amove 1 from 6 to 2\x0Amove 2 from 6 to 7\x0Amove 1 from 8 to 3\x0Amove 2 from 4 to 6\x0Amove 3 from 9 to 6\x0Amove 5 from 6 to 3\x0Amove 5 from 2 to 1\x0Amove 9 from 3 to 4\x0Amove 20 from 7 to 3\x0Amove 7 from 5 to 3\x0Amove 6 from 3 to 5\x0Amove 4 from 1 to 9\x0Amove 4 from 5 to 6\x0Amove 2 from 1 to 8\x0Amove 2 from 7 to 3\x0Amove 3 from 6 to 3\x0Amove 2 from 5 to 8\x0Amove 2 from 9 to 3\x0Amove 1 from 9 to 6\x0Amove 2 from 2 to 4\x0Amove 26 from 3 to 4\x0Amove 28 from 4 to 6\x0Amove 8 from 6 to 1\x0Amove 4 from 8 to 6\x0Amove 1 from 9 to 3\x0Amove 2 from 3 to 6\x0Amove 1 from 3 to 9\x0Amove 26 from 6 to 9\x0Amove 2 from 7 to 3\x0Amove 5 from 1 to 4\x0Amove 1 from 1 to 4\x0Amove 1 from 6 to 5\x0Amove 1 from 2 to 5\x0Amove 2 from 3 to 7\x0Amove 2 from 5 to 8\x0Amove 10 from 4 to 5\x0Amove 1 from 6 to 1\x0Amove 1 from 8 to 5\x0Amove 2 from 7 to 2\x0Amove 4 from 4 to 3\x0Amove 4 from 7 to 2\x0Amove 2 from 1 to 8\x0Amove 12 from 9 to 2\x0Amove 5 from 2 to 3\x0Amove 3 from 3 to 1\x0Amove 1 from 1 to 7\x0Amove 6 from 3 to 8\x0Amove 1 from 5 to 3\x0Amove 10 from 9 to 1\x0Amove 7 from 8 to 7\x0Amove 1 from 3 to 9\x0Amove 7 from 7 to 2\x0Amove 3 from 2 to 9\x0Amove 6 from 2 to 9\x0Amove 5 from 9 to 1\x0Amove 7 from 2 to 1\x0Amove 21 from 1 to 7\x0Amove 2 from 1 to 2\x0Amove 5 from 2 to 3\x0Amove 2 from 4 to 3\x0Amove 10 from 5 to 4\x0Amove 11 from 4 to 7\x0Amove 5 from 3 to 1\x0Amove 1 from 4 to 2\x0Amove 2 from 8 to 3\x0Amove 7 from 9 to 3\x0Amove 3 from 9 to 1\x0Amove 9 from 7 to 9\x0Amove 1 from 3 to 4\x0Amove 3 from 9 to 4\x0Amove 5 from 9 to 3\x0Amove 4 from 3 to 8\x0Amove 22 from 7 to 8\x0Amove 10 from 3 to 5\x0Amove 1 from 9 to 4\x0Amove 8 from 1 to 5\x0Amove 3 from 4 to 9\x0Amove 1 from 3 to 6\x0Amove 2 from 1 to 7\x0Amove 1 from 4 to 3\x0Amove 1 from 4 to 7\x0Amove 1 from 2 to 1\x0Amove 1 from 6 to 9\x0Amove 1 from 3 to 7\x0Amove 1 from 1 to 7\x0Amove 4 from 9 to 3\x0Amove 22 from 8 to 5\x0Amove 37 from 5 to 9\x0Amove 37 from 9 to 6\x0Amove 3 from 7 to 9\x0Amove 2 from 8 to 6\x0Amove 1 from 9 to 3\x0Amove 2 from 5 to 1\x0Amove 1 from 2 to 5\x0Amove 7 from 6 to 4\x0Amove 18 from 6 to 2\x0Amove 1 from 3 to 7\x0Amove 1 from 5 to 4\x0Amove 1 from 8 to 5\x0Amove 9 from 2 to 5\x0Amove 3 from 4 to 6\x0Amove 2 from 2 to 7\x0Amove 5 from 2 to 3\x0Amove 1 from 8 to 1\x0Amove 1 from 9 to 4\x0Amove 2 from 7 to 8\x0Amove 7 from 3 to 7\x0Amove 3 from 1 to 3\x0Amove 1 from 9 to 5\x0Amove 17 from 6 to 2\x0Amove 12 from 7 to 9\x0Amove 1 from 4 to 8\x0Amove 1 from 8 to 4\x0Amove 4 from 5 to 2\x0Amove 2 from 8 to 9\x0Amove 3 from 4 to 2\x0Amove 3 from 3 to 7\x0Amove 2 from 4 to 3\x0Amove 8 from 9 to 1\x0Amove 1 from 4 to 2\x0Amove 24 from 2 to 1\x0Amove 6 from 5 to 1\x0Amove 1 from 7 to 4\x0Amove 3 from 2 to 8\x0Amove 3 from 3 to 7\x0Amove 1 from 4 to 6\x0Amove 2 from 8 to 5\x0Amove 3 from 9 to 4\x0Amove 1 from 5 to 3\x0Amove 1 from 3 to 5\x0Amove 3 from 9 to 8\x0Amove 1 from 5 to 7\x0Amove 5 from 7 to 9\x0Amove 2 from 8 to 4\x0Amove 1 from 3 to 2\x0Amove 1 from 7 to 3\x0Amove 1 from 8 to 5\x0Amove 1 from 2 to 9\x0Amove 1 from 6 to 2\x0Amove 2 from 9 to 8\x0Amove 1 from 3 to 7\x0Amove 24 from 1 to 3\x0Amove 1 from 7 to 6\x0Amove 3 from 5 to 1\x0Amove 1 from 4 to 3\x0Amove 1 from 8 to 6\x0Amove 1 from 6 to 4\x0Amove 1 from 5 to 4\x0Amove 1 from 8 to 5\x0Amove 1 from 5 to 7\x0Amove 1 from 2 to 5\x0Amove 1 from 6 to 3\x0Amove 1 from 4 to 9\x0Amove 1 from 5 to 7\x0Amove 2 from 9 to 2\x0Amove 3 from 4 to 8\x0Amove 2 from 4 to 3\x0Amove 11 from 1 to 9\x0Amove 7 from 9 to 1\x0Amove 9 from 1 to 9\x0Amove 1 from 3 to 7\x0Amove 3 from 7 to 4\x0Amove 2 from 2 to 6\x0Amove 2 from 4 to 1\x0Amove 1 from 6 to 7\x0Amove 22 from 3 to 7\x0Amove 1 from 3 to 5\x0Amove 1 from 5 to 2\x0Amove 1 from 6 to 7\x0Amove 5 from 1 to 9\x0Amove 1 from 8 to 5\x0Amove 1 from 2 to 1\x0Amove 15 from 9 to 4\x0Amove 6 from 9 to 6\x0Amove 14 from 4 to 1\x0Amove 5 from 6 to 2\x0Amove 1 from 5 to 1\x0Amove 9 from 1 to 4\x0Amove 5 from 1 to 3\x0Amove 3 from 2 to 6\x0Amove 2 from 8 to 1\x0Amove 5 from 1 to 9\x0Amove 10 from 7 to 8\x0Amove 3 from 3 to 8\x0Amove 2 from 8 to 7\x0Amove 5 from 4 to 9\x0Amove 3 from 3 to 5\x0Amove 1 from 6 to 9\x0Amove 1 from 3 to 9\x0Amove 1 from 3 to 6\x0Amove 1 from 3 to 7\x0Amove 2 from 6 to 9\x0Amove 2 from 4 to 1\x0Amove 13 from 9 to 8\x0Amove 2 from 1 to 4\x0Amove 6 from 4 to 9\x0Amove 1 from 6 to 2\x0Amove 1 from 2 to 3\x0Amove 3 from 5 to 3\x0Amove 4 from 3 to 2\x0Amove 7 from 9 to 2\x0Amove 1 from 6 to 4\x0Amove 4 from 2 to 5\x0Amove 2 from 2 to 1\x0Amove 4 from 5 to 8\x0Amove 1 from 4 to 2\x0Amove 6 from 2 to 1\x0Amove 2 from 2 to 1\x0Amove 22 from 8 to 2\x0Amove 16 from 7 to 4\x0Amove 14 from 2 to 7\x0Amove 7 from 8 to 2\x0Amove 4 from 7 to 1\x0Amove 14 from 2 to 1\x0Amove 10 from 7 to 1\x0Amove 1 from 7 to 3\x0Amove 1 from 3 to 4\x0Amove 1 from 2 to 5\x0Amove 25 from 1 to 5\x0Amove 1 from 5 to 3\x0Amove 4 from 4 to 2\x0Amove 13 from 4 to 6\x0Amove 4 from 2 to 1\x0Amove 3 from 6 to 2\x0Amove 9 from 1 to 2\x0Amove 22 from 5 to 4\x0Amove 1 from 2 to 7\x0Amove 8 from 1 to 5\x0Amove 1 from 4 to 5\x0Amove 15 from 4 to 3\x0Amove 11 from 2 to 1\x0Amove 1 from 7 to 3\x0Amove 2 from 5 to 1\x0Amove 13 from 3 to 5\x0Amove 10 from 6 to 7\x0Amove 1 from 3 to 4\x0Amove 1 from 3 to 6\x0Amove 1 from 3 to 9\x0Amove 1 from 9 to 5\x0Amove 1 from 6 to 2\x0Amove 6 from 4 to 9\x0Amove 1 from 3 to 7\x0Amove 1 from 5 to 1\x0Amove 3 from 5 to 6\x0Amove 1 from 4 to 3\x0Amove 12 from 5 to 6\x0Amove 1 from 2 to 8\x0Amove 4 from 1 to 7\x0Amove 1 from 3 to 2\x0Amove 1 from 2 to 6\x0Amove 9 from 6 to 4\x0Amove 1 from 8 to 7\x0Amove 3 from 1 to 2\x0Amove 2 from 2 to 5\x0Amove 5 from 4 to 6\x0Amove 1 from 4 to 6\x0Amove 6 from 7 to 3\x0Amove 6 from 5 to 7\x0Amove 12 from 7 to 4\x0Amove 1 from 2 to 8\x0Amove 6 from 9 to 5\x0Amove 1 from 8 to 9\x0Amove 1 from 3 to 6\x0Amove 4 from 4 to 1\x0Amove 1 from 7 to 9\x0Amove 4 from 4 to 6\x0Amove 2 from 9 to 7\x0Amove 7 from 5 to 1\x0Amove 3 from 1 to 4\x0Amove 4 from 3 to 1\x0Amove 10 from 6 to 9\x0Amove 1 from 3 to 5\x0Amove 8 from 4 to 6\x0Amove 2 from 5 to 2\x0Amove 4 from 7 to 4\x0Amove 1 from 5 to 9\x0Amove 5 from 4 to 7\x0Amove 1 from 4 to 8\x0Amove 2 from 2 to 6\x0Amove 1 from 5 to 3\x0Amove 4 from 9 to 6\x0Amove 11 from 6 to 8\x0Amove 1 from 1 to 4\x0Amove 1 from 4 to 1\x0Amove 1 from 3 to 1\x0Amove 10 from 1 to 4\x0Amove 3 from 9 to 5\x0Amove 1 from 9 to 3\x0Amove 2 from 7 to 4\x0Amove 3 from 9 to 4\x0Amove 3 from 5 to 8\x0Amove 1 from 3 to 5\x0Amove 15 from 8 to 2\x0Amove 8 from 1 to 4\x0Amove 2 from 1 to 2\x0Amove 10 from 2 to 3\x0Amove 1 from 5 to 7\x0Amove 3 from 7 to 8\x0Amove 10 from 3 to 5\x0Amove 4 from 4 to 2\x0Amove 7 from 4 to 1\x0Amove 2 from 7 to 4\x0Amove 1 from 8 to 9\x0Amove 5 from 1 to 6\x0Amove 13 from 6 to 2\x0Amove 2 from 1 to 4\x0Amove 15 from 4 to 5\x0Amove 1 from 9 to 3\x0Amove 1 from 3 to 4\x0Amove 2 from 8 to 3\x0Amove 20 from 2 to 6\x0Amove 3 from 2 to 8\x0Amove 2 from 3 to 8\x0Amove 9 from 5 to 2\x0Amove 6 from 5 to 9\x0Amove 2 from 4 to 1\x0Amove 8 from 5 to 4\x0Amove 2 from 8 to 1\x0Amove 5 from 9 to 5\x0Amove 3 from 5 to 7\x0Amove 1 from 8 to 2\x0Amove 2 from 4 to 1\x0Amove 14 from 6 to 4\x0Amove 2 from 1 to 8\x0Amove 5 from 6 to 3\x0Amove 3 from 1 to 6\x0Amove 5 from 3 to 2\x0Amove 1 from 9 to 6\x0Amove 8 from 6 to 2\x0Amove 2 from 7 to 4\x0Amove 1 from 1 to 3\x0Amove 2 from 5 to 8\x0Amove 5 from 4 to 3\x0Amove 2 from 5 to 3\x0Amove 1 from 7 to 5\x0Amove 4 from 4 to 3\x0Amove 2 from 4 to 2\x0Amove 1 from 3 to 7\x0Amove 5 from 3 to 7\x0Amove 1 from 7 to 3\x0Amove 3 from 3 to 2\x0Amove 1 from 5 to 9\x0Amove 2 from 7 to 9\x0Amove 1 from 9 to 5\x0Amove 1 from 5 to 3\x0Amove 10 from 4 to 9\x0Amove 3 from 3 to 9\x0Amove 27 from 2 to 5\x0Amove 3 from 8 to 3\x0Amove 2 from 2 to 6\x0Amove 4 from 9 to 7\x0Amove 5 from 3 to 8\x0Amove 5 from 7 to 3\x0Amove 25 from 5 to 1\x0Amove 3 from 9 to 8\x0Amove 1 from 3 to 2\x0Amove 1 from 5 to 3\x0Amove 2 from 7 to 9\x0Amove 10 from 8 to 7\x0Amove 1 from 2 to 3\x0Amove 13 from 1 to 7\x0Amove 3 from 9 to 7\x0Amove 3 from 3 to 1\x0Amove 1 from 5 to 8\x0Amove 2 from 8 to 6\x0Amove 4 from 6 to 5\x0Amove 4 from 5 to 6\x0Amove 1 from 4 to 6\x0Amove 23 from 7 to 9\x0Amove 2 from 6 to 8\x0Amove 28 from 9 to 1\x0Amove 1 from 8 to 1\x0Amove 3 from 7 to 3\x0Amove 1 from 9 to 4\x0Amove 3 from 3 to 6\x0Amove 3 from 3 to 4\x0Amove 6 from 6 to 8\x0Amove 12 from 1 to 7\x0Amove 9 from 1 to 6\x0Amove 3 from 6 to 3\x0Amove 2 from 4 to 7\x0Amove 4 from 8 to 7\x0Amove 1 from 8 to 5\x0Amove 1 from 8 to 4\x0Amove 8 from 1 to 7\x0Amove 1 from 3 to 4\x0Amove 1 from 8 to 3\x0Amove 3 from 7 to 5\x0Amove 9 from 1 to 3\x0Amove 3 from 6 to 5\x0Amove 3 from 1 to 7\x0Amove 4 from 4 to 2\x0Amove 3 from 1 to 4\x0Amove 4 from 2 to 8\x0Amove 1 from 6 to 2\x0Amove 3 from 5 to 6\x0Amove 4 from 8 to 5\x0Amove 9 from 7 to 6\x0Amove 12 from 7 to 1\x0Amove 5 from 7 to 3\x0Amove 1 from 9 to 7\x0Amove 1 from 2 to 9\x0Amove 1 from 9 to 4\x0Amove 7 from 6 to 3\x0Amove 5 from 6 to 2\x0Amove 1 from 7 to 6\x0Amove 3 from 6 to 1\x0Amove 2 from 4 to 9\x0Amove 7 from 5 to 8\x0Amove 2 from 9 to 4\x0Amove 1 from 5 to 8\x0Amove 4 from 4 to 1\x0Amove 11 from 1 to 7\x0Amove 8 from 3 to 1\x0Amove 8 from 8 to 6\x0Amove 3 from 3 to 5\x0Amove 5 from 6 to 1\x0Amove 2 from 1 to 2\x0Amove 6 from 2 to 3\x0Amove 2 from 6 to 7\x0Amove 3 from 5 to 4\x0Amove 7 from 3 to 9\x0Amove 5 from 9 to 5\x0Amove 3 from 4 to 3\x0Amove 4 from 5 to 2\x0Amove 2 from 9 to 4\x0Amove 6 from 1 to 9\x0Amove 1 from 6 to 9\x0Amove 7 from 7 to 1\x0Amove 1 from 7 to 3\x0Amove 2 from 4 to 5\x0Amove 1 from 9 to 1\x0Amove 4 from 2 to 3\x0Amove 2 from 5 to 2\x0Amove 9 from 3 to 1\x0Amove 3 from 2 to 4\x0Amove 28 from 1 to 6\x0Amove 2 from 1 to 3\x0Amove 17 from 6 to 3\x0Amove 2 from 9 to 5\x0Amove 2 from 6 to 7\x0Amove 1 from 5 to 7\x0Amove 1 from 9 to 4\x0Amove 5 from 6 to 9\x0Amove 14 from 3 to 5\x0Amove 15 from 5 to 9\x0Amove 1 from 4 to 9\x0Amove 1 from 5 to 6\x0Amove 1 from 4 to 1\x0Amove 11 from 3 to 6\x0Amove 1 from 1 to 6\x0Amove 12 from 6 to 8\x0Amove 4 from 9 to 7\x0Amove 20 from 9 to 4\x0Amove 18 from 4 to 5\x0Amove 6 from 5 to 8\x0Amove 12 from 8 to 2\x0Amove 2 from 2 to 6\x0Amove 1 from 5 to 2\x0Amove 4 from 4 to 8\x0Amove 5 from 5 to 9\x0Amove 4 from 3 to 6\x0Amove 1 from 3 to 8\x0Amove 7 from 7 to 8\x0Amove 10 from 2 to 8\x0Amove 1 from 6 to 3\x0Amove 10 from 6 to 5\x0Amove 10 from 5 to 2\x0Amove 2 from 7 to 5\x0Amove 9 from 2 to 1\x0Amove 27 from 8 to 9\x0Amove 2 from 2 to 7\x0Amove 9 from 1 to 2\x0Amove 1 from 5 to 3\x0Amove 9 from 2 to 1\x0Amove 1 from 8 to 7\x0Amove 2 from 1 to 3\x0Amove 19 from 9 to 1\x0Amove 5 from 5 to 1\x0Amove 3 from 9 to 2\x0Amove 2 from 3 to 9\x0Amove 1 from 3 to 4\x0Amove 5 from 7 to 4\x0Amove 1 from 7 to 3\x0Amove 17 from 1 to 2\x0Amove 1 from 5 to 3\x0Amove 9 from 9 to 5\x0Amove 2 from 1 to 2\x0Amove 1 from 4 to 9\x0Amove 2 from 4 to 6\x0Amove 1 from 4 to 7\x0Amove 6 from 1 to 8\x0A"), false), HEX3Aanonymous_469762055);
    Label1: do {
      var HEX3Atmp_469762180 = nimCopy(null, (Temporary2 = filter_469762059(lines_469762080, HEX3Aanonymous_469762081), Temporary2)[chckIndx(0, 0, (Temporary2).length - 1)], NTI33554439);
      var iHEX60gensym5_469762183 = 0;
      var resultHEX60gensym5_469762192 = newSeq_469762184(chckRange((HEX3Atmp_469762180).length, 0, 2147483647));
      Label3: do {
        var itHEX60gensym5_469762193 = 0;
        var i_469762504 = 0;
        var L_469762505 = (HEX3Atmp_469762180).length;
        Label4: do {
            Label5: while (true) {
            if (!(i_469762504 < L_469762505)) break Label5;
              itHEX60gensym5_469762193 = HEX3Atmp_469762180[chckIndx(i_469762504, 0, (HEX3Atmp_469762180).length - 1)];
              resultHEX60gensym5_469762192[chckIndx(iHEX60gensym5_469762183, 0, (resultHEX60gensym5_469762192).length - 1)] = itHEX60gensym5_469762193;
              iHEX60gensym5_469762183 = addInt(iHEX60gensym5_469762183, 1);
              i_469762504 = addInt(i_469762504, 1);
              if (!(((HEX3Atmp_469762180).length == L_469762505))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(258, 11) `len(a) == L` the length of the string changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    var stackcount_469762229 = (filter_469762204(resultHEX60gensym5_469762192, HEX3Aanonymous_469762198)).length;
    var stacks_469762251 = [newSeq_469762234(0)];
    Label6: do {
      var sidx_469762256 = 0;
      var colontmp__469762508 = 0;
      colontmp__469762508 = subInt(stackcount_469762229, 1);
      var res_469762509 = 0;
      Label7: do {
          Label8: while (true) {
          if (!(res_469762509 <= colontmp__469762508)) break Label8;
            sidx_469762256 = res_469762509;
            stacks_469762251[0].push(newSeq_469762184(0));;
            res_469762509 = addInt(res_469762509, 1);
          }
      } while (false);
    } while (false);
    var headerLen_469762268 = 0;
    Label9: do {
      var line_469762289 = [];
      var i_469762517 = 0;
      var L_469762518 = (lines_469762080).length;
      Label10: do {
          Label11: while (true) {
          if (!(i_469762517 < L_469762518)) break Label11;
            line_469762289 = lines_469762080[chckIndx(i_469762517, 0, (lines_469762080).length - 1)];
            if (nsuStartsWith(line_469762289, makeNimstrLit(" 1 "))) {
            break Label9;
            }
            
            headerLen_469762268 = addInt(headerLen_469762268, 1);
            Label12: do {
              var sidx_469762302 = 0;
              var colontmp__469762513 = 0;
              colontmp__469762513 = subInt((stacks_469762251[0]).length, 1);
              var res_469762514 = 0;
              Label13: do {
                  Label14: while (true) {
                  if (!(res_469762514 <= colontmp__469762513)) break Label14;
                    sidx_469762302 = res_469762514;
                    var chr_469762303 = line_469762289[chckIndx(addInt(1, mulInt(4, sidx_469762302)), 0, (line_469762289).length - 1)];
                    if (!((chr_469762303 == 32))) {
                    stacks_469762251[0][chckIndx(sidx_469762302, 0, (stacks_469762251[0]).length - 1)].push(chr_469762303);;
                    }
                    
                    res_469762514 = addInt(res_469762514, 1);
                  }
              } while (false);
            } while (false);
            i_469762517 = addInt(i_469762517, 1);
            if (!(((lines_469762080).length == L_469762518))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    Label15: do {
      var i_469762312 = 0;
      var colontmp__469762521 = 0;
      colontmp__469762521 = subInt(stackcount_469762229, 1);
      var res_469762522 = 0;
      Label16: do {
          Label17: while (true) {
          if (!(res_469762522 <= colontmp__469762521)) break Label17;
            i_469762312 = res_469762522;
            reverse_469762313(stacks_469762251[0][chckIndx(i_469762312, 0, (stacks_469762251[0]).length - 1)]);
            res_469762522 = addInt(res_469762522, 1);
          }
      } while (false);
    } while (false);
    Label18: do {
      var line_469762373 = [];
      var colontmp__469762528 = [];
      colontmp__469762528 = HEX5BHEX5D_469762350(lines_469762080, HEX2EHEX2E_905970515(addInt(headerLen_469762268, 1), subInt((lines_469762080).length, 1)));
      var i_469762529 = 0;
      var L_469762530 = (colontmp__469762528).length;
      Label19: do {
          Label20: while (true) {
          if (!(i_469762529 < L_469762530)) break Label20;
            line_469762373 = colontmp__469762528[chckIndx(i_469762529, 0, (colontmp__469762528).length - 1)];
            var split_469762374 = nsuSplitString(line_469762373, makeNimstrLit(" "), -1);
            var cnt_469762375 = nsuParseInt(split_469762374[chckIndx(1, 0, (split_469762374).length - 1)]);
            var src_469762376 = subInt(nsuParseInt(split_469762374[chckIndx(3, 0, (split_469762374).length - 1)]), 1);
            var dst_469762377 = subInt(nsuParseInt(split_469762374[chckIndx(5, 0, (split_469762374).length - 1)]), 1);
            var i0_469762381 = subInt((stacks_469762251[0][chckIndx(src_469762376, 0, (stacks_469762251[0]).length - 1)]).length, cnt_469762375);
            Label21: do {
              var __469762386 = 0;
              var res_469762526 = 1;
              Label22: do {
                  Label23: while (true) {
                  if (!(res_469762526 <= cnt_469762375)) break Label23;
                    __469762386 = res_469762526;
                    var chr_469762387 = stacks_469762251[0][chckIndx(src_469762376, 0, (stacks_469762251[0]).length - 1)][chckIndx(i0_469762381, 0, (stacks_469762251[0][chckIndx(src_469762376, 0, (stacks_469762251[0]).length - 1)]).length - 1)];
                    delete_469762388(stacks_469762251[0], chckIndx(src_469762376, 0, (stacks_469762251[0]).length - 1), chckRange(i0_469762381, 0, 2147483647));
                    stacks_469762251[0][chckIndx(dst_469762377, 0, (stacks_469762251[0]).length - 1)].push(chr_469762387);;
                    res_469762526 = addInt(res_469762526, 1);
                  }
              } while (false);
            } while (false);
            i_469762529 = addInt(i_469762529, 1);
            if (!(((colontmp__469762528).length == L_469762530))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    var heads_469762444 = map_469762421(stacks_469762251[0], HEX3Aanonymous_469762414);
    result_469762053 = nimCopy(null, heads_469762444, NTI33554439);
    break BeforeRet;
  } while (false);

  return result_469762053;

}

function js_run05_2() {
  var result_469762500 = null;

  BeforeRet: do {
    result_469762500 = toJSStr(run05_2_469762052());
    break BeforeRet;
  } while (false);

  return result_469762500;

}
